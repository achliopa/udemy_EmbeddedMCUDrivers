/*
 * 006spi_tx_testing.c
 *
 *  Created on: Feb 10, 2019
 *      Author: admin
 */

#include<string.h>
#include "stm32f407xx.h"


//command codes
#define COMMAND_LED_CTRL      		0x50
#define COMMAND_SENSOR_READ      	0x51
#define COMMAND_LED_READ      		0x52
#define COMMAND_PRINT      			0x53
#define COMMAND_ID_READ      		0x54

#define LED_ON     1
#define LED_OFF    0

//arduino analog pins
#define ANALOG_PIN0 	0
#define ANALOG_PIN1 	1
#define ANALOG_PIN2 	2
#define ANALOG_PIN3 	3
#define ANALOG_PIN4 	4

//arduino led

#define LED_PIN  9

void delay(void)
{
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
}

/*
 * PB14 --> SPI2_MISO
 * PB15 --> SPI2_MOSI
 * PB13 -> SPI2_SCLK
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
	GPIO_Init(&SPIPins);

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
	GPIO_Init(&SPIPins);

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	GPIO_Init(&SPIPins);


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	GPIO_Init(&SPIPins);


}

void SPI2_Inits(void)
{

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;//generates sclk of 2MHz
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin

	SPI_Init(&SPI2handle);
}

void GPIO_ButtonInit(void)
{
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;

	GPIO_Init(&GPIOBtn);

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;

	GPIO_PeriClockControl(GPIOD,ENABLE);

	GPIO_Init(&GpioLed);

}


uint8_t SPI_VerifyResponse(uint8_t ackbyte)
{

	if(ackbyte == (uint8_t)0xF5)
	{
		//ack
		return 1;
	}

	return 0;
}

int main(void)
{
	uint8_t dummy_byte = 0xff;

	GPIO_ButtonInit();

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();

	/*
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );

		//to avoid button de-bouncing related issues 200ms of delay
		delay();

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);

		//send command CMD_LED_CTRL  <pin no(1)>     <value(1)>
				uint8_t command = COMMAND_LED_CTRL;
				SPI_SendData(SPI2,&command,1);
				uint8_t ack;

				SPI_ReceiveData(SPI2,&ack,1);

				SPI_SendData(SPI2,&dummy_byte,1);

				SPI_ReceiveData(SPI2,&ack,1);

				if ( SPI_VerifyResponse(ack) )
				{
						//Send args
					uint8_t args[2];
					args[0] = LED_PIN;
					args[1] = LED_ON;

					SPI_SendData(SPI2,args,2);
				}


				//wait till button is pressed
				while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );

				//to avoid button de-bouncing related issues 200ms of delay
				delay();

				//2) send command CMD_SENOSR_READ   <analog pin number(1) >
				 command = COMMAND_SENSOR_READ;
				SPI_SendData(SPI2,&command,1);

				SPI_SendData(SPI2,&dummy_byte,1);
				SPI_ReceiveData(SPI2,&ack,1);

				if ( SPI_VerifyResponse(ack) )
				{
						//Send args
					uint8_t args[2];
					args[0] = ANALOG_PIN0;

					SPI_SendData(SPI2,args,1);

					//receive the 1 byte sensor value from slave
				    uint8_t sensor_value ;
				    delay();//give some time for slave to be ready with the data.
				    SPI_SendData(SPI2,&dummy_byte,1);
				    SPI_ReceiveData(SPI2,&sensor_value,1);
				}

				//wait till button is pressed
				while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );

				//to avoid button de-bouncing related issues 200ms of delay
				delay();


				//3) send command COMMAND_LED_READ     <pin no(1) >
				 command = COMMAND_LED_READ;
				SPI_SendData(SPI2,&command,1);

				SPI_SendData(SPI2,&dummy_byte,1);
				SPI_ReceiveData(SPI2,&ack,1);

				if ( SPI_VerifyResponse(ack) )
				{
						//Send args
					uint8_t args[2];
					args[0] = LED_PIN;

					SPI_SendData(SPI2,args,1);

					//receive the 1 byte sensor value from slave
				    uint8_t led_state ;
				    delay();//give some time for slave to be ready with the data.
				    SPI_SendData(SPI2,&dummy_byte,1);
				    SPI_ReceiveData(SPI2,&led_state,1);
				}

				//wait till button is pressed
				while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );

				//to avoid button de-bouncing related issues 200ms of delay
				delay();

				//4) send command CMD_PRINT     <len(2)>  < message(len) >
				command = COMMAND_PRINT;
				SPI_SendData(SPI2,&command,1);

				uint8_t message[] = "Hello how are you ?";

				SPI_SendData(SPI2,&dummy_byte,1);
				SPI_ReceiveData(SPI2,&ack,1);

				if ( SPI_VerifyResponse(ack) )
				{
						//Send args
					uint8_t args[2];
					args[0] = strlen((char*)message);

					SPI_SendData(SPI2,args,1);
					SPI_SendData(SPI2,message,args[0]);
				}


				//wait till button is pressed
				while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );

				//to avoid button de-bouncing related issues 200ms of delay
				delay();

				//3) send command COMMAND_LED_READ     <pin no(1) >
				command = COMMAND_ID_READ;
				SPI_SendData(SPI2,&command,1);

				SPI_SendData(SPI2,&dummy_byte,1);
				SPI_ReceiveData(SPI2,&ack,1);

				uint8_t rx_buffer[10];
				if ( SPI_VerifyResponse(ack) )
				{
					for(uint32_t i = 0 ; i < 10 ; i++)
					{
						SPI_SendData(SPI2,&dummy_byte,1);
						SPI_ReceiveData(SPI2,&rx_buffer[i],1);
					}
				}


		//lets confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
	}

	return 0;

}
