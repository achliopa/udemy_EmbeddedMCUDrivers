

#include "stm32f407xx_usart_driver.h"
uint16_t AHB_PreScaler_uart[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler_uart[4] = { 2, 4 , 8, 16};

/*********************************************************************
 * @fn      		  - RCC_GetPCLK1Value
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK1Value_uart(void)
{
	uint32_t SystemClock=0,tmp,pclk1;
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;

	uint8_t ahbp,apb1p;

	if(clk_src == 0)
	{
		SystemClock = 16000000;
	}else
	{
		SystemClock = 8000000;
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;

	if(tmp < 0x08)
	{
		ahbp = 1;
	}else
	{
       ahbp = AHB_PreScaler_uart[tmp-8];
	}

	tmp = (RCC->CFGR >> 10 ) & 0x7;
	if(tmp < 0x04)
	{
		apb1p = 1;
	}else
	{
		apb1p = APB1_PreScaler_uart[tmp-4];
	}

	pclk1 = (SystemClock / ahbp )/ apb1p;

	return pclk1;
}

/*********************************************************************
 * @fn      		  - RCC_GetPCLK2Value
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2Value_uart(void)
{
	uint32_t SystemClock=0,tmp,pclk2;
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
	{
		SystemClock = 16000000;
	}else
	{
		SystemClock = 8000000;
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;

	if(tmp < 0x08)
	{
		ahbp = 1;
	}else
	{
       ahbp = AHB_PreScaler_uart[tmp-8];
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
	if(tmp < 0x04)
	{
		apb2p = 1;
	}else
	{
		apb2p = APB1_PreScaler_uart[tmp-4];
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;

	return pclk2;
}

/*********************************************************************
 * @fn      		  - USART_Init
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{

	uint32_t tempreg=0;
	//configure the CR1

	 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);

	//enable the clock
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
	{
		tempreg|= (1 <<  USART_CR1_RE);
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
	{
		tempreg |= ( 1 << USART_CR1_TE );

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
	{
		tempreg |= ( ( 1 << USART_CR1_TE) | ( 1 << USART_CR1_RE) );
	}

	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;

	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
	{
		//enable the partiy
		tempreg |= ( 1 << USART_CR1_PCE);

		//by default it will be even parity

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
	{
		//enable the partiy
	    tempreg |= ( 1 << USART_CR1_PCE);

	    //enable odd parity
	    tempreg |= ( 1 << USART_CR1_PS);

	}

	pUSARTHandle->pUSARTx->CR1 = tempreg;

	tempreg=0;

	//now lets do CR2 inits.
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;

	pUSARTHandle->pUSARTx->CR2 = tempreg;

	tempreg=0;
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
	{
		//enable CTS hardware flow control
		tempreg |= ( 1 << USART_CR3_CTSE);


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
	{
		//enable RTS hardware flow control
		tempreg |= ( 1 << USART_CR3_RTSE);

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
	{
		//enable CTS hardware flow control
		tempreg |= ( 1 << USART_CR3_CTSE);

		//enable RTS hardware flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;

	//baudrate config
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);

}



/*********************************************************************
 * @fn      		  - USART_EnableOrDisable
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t Cmd)
{
	if(Cmd == ENABLE)
	{
		pUSARTx->CR1 |= (1 << 13);
	}else
	{
		pUSARTx->CR1 &= ~(1 << 13);
	}

}



/*********************************************************************
 * @fn      		  - I2C_PeriClockControl
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(pUSARTx == USART1)
		{
			USART1_PCCK_EN();
		}else if (pUSARTx == USART2)
		{
			USART2_PCCK_EN();
		}else if (pUSARTx == USART3)
		{
			USART3_PCCK_EN();
		}
		else if (pUSARTx == UART4)
		{
			UART4_PCCK_EN();
		}
	}
	else
	{
		//TODO
	}

}
/*********************************************************************
 * @fn      		  - USART_GetFlagStatus
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
    if(pUSARTx->SR & ( 1 << StatusFlagName))
    {
    	return SET;
    }

   return RESET;
}

/*********************************************************************
 * @fn      		  - USART_SendData
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void USART_SendData(USART_RegDef_t *pUSARTx, uint8_t *pTxBuffer, uint32_t Len)
{

	for(uint32_t i = 0 ; i < Len; i++)
	{
		while(! USART_GetFlagStatus(pUSARTx,USART_SR_TXE));
		pUSARTx->DR = *pTxBuffer;
		pTxBuffer++;
	}

	//wait till TC is set
	while( ! USART_GetFlagStatus(pUSARTx,USART_SR_TC));
}


/*********************************************************************
 * @fn      		  - USART_ReceiveData
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void USART_ReceiveData(USART_RegDef_t *pUSARTx,uint8_t *pRxBuffer, uint32_t Len)
{
	for(uint32_t i = 0 ; i < Len; i++)
	{
		while(! USART_GetFlagStatus(pUSARTx,USART_SR_RXNE));
		*pRxBuffer = pUSARTx->DR;
		pRxBuffer++;
	}

}


/*********************************************************************
 * @fn      		  - USART_SendDataWithIT
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
uint8_t USART_SendDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pTxBuffer, uint32_t Len)
{
	uint8_t txstate = pUSARTHandle->TxBusyState;

	if(txstate != USART_BUSY_IN_TX)
	{
		pUSARTHandle->TxLen = Len;
		pUSARTHandle->TxSize = Len;
		pUSARTHandle->pTxBuffer = pTxBuffer;
		pUSARTHandle->TxBusyState = USART_BUSY_IN_TX;

		//enable the TXE and TC interrupt
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_TXEIE );

		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_TCIE );

	}

	return txstate;

}

/*********************************************************************
 * @fn      		  - USART_SetBaudRate
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{

	uint32_t PCLKx;

	float usartdiv;

	uint32_t integerpart,fraction;

   uint32_t tempreg=0;

   if(pUSARTx == USART1 || pUSARTx == USART6)
   {
	   //apb2
	   PCLKx = RCC_GetPCLK2Value_uart();
   }else
   {
	   PCLKx = RCC_GetPCLK1Value_uart();
   }

   if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
   {
	   //OVER8 = 1 // sample by 8
	   usartdiv = PCLKx / (8 * BaudRate);
   }else
   {
	   //sample by 16
	   usartdiv = PCLKx / (16 * BaudRate); //416.687589
   }

   integerpart = usartdiv; //416

   tempreg |= integerpart << 4;

   fraction = ((usartdiv * 100 ) - (integerpart * 100));
   if(pUSARTx->CR1 & ( 1 <<USART_CR1_OVER8))
    {
 	   //OVER8 = 1 // sample by 8
	   fraction = ((( fraction * 8)+ 50) / 100)& ((uint8_t)0x07);

    }else
    {
 	   //sample by 16
    	fraction = ((( fraction * 16)+ 50) / 100) & ((uint8_t)0x0F);

    }

   tempreg |=fraction;

   pUSARTx->BRR = tempreg;

#if 0
	uint32_t PCLKx;

	uint32_t usartdiv;

	uint32_t integerpart,fraction;

  uint32_t tempreg=0;

  if(pUSARTx == USART1 || pUSARTx == USART6)
  {
	   //apb2
	   PCLKx = RCC_GetPCLK2Value();
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
  }

  if(pUSARTx->CR1 & USART_CR1_OVER8_Bit_Mask)
  {
	   //OVER8 = 1 // sample by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
  }else
  {
	   //sample by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
  }

   integerpart = usartdiv/100;

  tempreg |= integerpart << 4;

  fraction = (usartdiv - (integerpart * 100));
  if(pUSARTx->CR1 & USART_CR1_OVER8_Bit_Mask)
   {
	   //OVER8 = 1 // sample by 8
	   fraction = ((( fraction * 8)+ 50) / 100)& ((uint8_t)0x07);

   }else
   {
	   //sample by 16
   	fraction = ((( fraction * 16)+ 50) / 100) & ((uint8_t)0x0F);

   }

  tempreg |=fraction;

  pUSARTx->BRR = tempreg;

#endif
}
/*********************************************************************
 * @fn      		  - USART_ReceiveDataWithIT
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
	uint8_t rxstate = pUSARTHandle->RxBusyState;

	if(rxstate != USART_BUSY_IN_RX)
	{
		pUSARTHandle->RxLen = Len;
		pUSARTHandle->RxSize = Len;
		pUSARTHandle->pRxBuffer = pRxBuffer;
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;

		//enable the TXE and TC interrupt
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_RXNEIE);

	}

	return rxstate;

}


/*********************************************************************
 * @fn      		  - USART_ClearFlag
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              - Applicable to only USART_CTS_FLAG , USART_LBD_FLAG
 * USART_TC_FLAG,USART_TC_FLAG flags
 *

 */

void USART_ClearFlag(USART_RegDef_t *pUSARTx, uint16_t StatusFlagName)
{
	pUSARTx->SR &= ~(1 << StatusFlagName);

}

/*********************************************************************
 * @fn      		  - USART_IRQInterruptConfig
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{

	if(EnorDi == ENABLE)
	{
		if(IRQNumber <= 31)
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );

		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
		{
			//program ISER1 register
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
		}
		else if(IRQNumber >= 64 && IRQNumber < 96 )
		{
			//program ISER2 register //64 to 95
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
		}
	}else
	{
		if(IRQNumber <= 31)
		{
			//program ICER0 register
			*NVIC_ICER0 |= ( 1 << IRQNumber );
		}else if(IRQNumber > 31 && IRQNumber < 64 )
		{
			//program ICER1 register
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
		}
		else if(IRQNumber >= 6 && IRQNumber < 96 )
		{
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}


/*********************************************************************
 * @fn      		  - USART_IRQPriorityConfig
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void USART_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority)
{
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
	uint8_t iprx_section  = IRQNumber %4 ;

	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;

	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );

}

/*********************************************************************
 * @fn      		  - USART_IRQHandler
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{

	uint32_t temp1 , temp2;

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TC);
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TCIE);

	if(temp1 && temp2 )
	{
		//this interrupt is because of TC
		//close tx communication and call application callback
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
		{
			pUSARTHandle->TxBusyState = USART_READY;
			pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TCIE);
			USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
		}
	}

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TXE);
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);


	if(temp1 && temp2 )
	{
		//this interrupt is because of txe
		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
		{
			//TXE is set so send data
			if(pUSARTHandle->TxLen > 0)
			{
				pUSARTHandle->pUSARTx->DR = *pUSARTHandle->pTxBuffer;
				pUSARTHandle->pTxBuffer++;
				pUSARTHandle->TxLen--;
			}else
			{
				//disable the TXEIE
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE);
			}
		}
	}

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_CTS);
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);


	if(temp1  && temp2 )
	{
		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
	}

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_IDLE);
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_IDLEIE);


	if(temp1 && temp2)
	{
		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
	}

#if 0
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_ORE_BIT_Mask;
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE_BIT_Mask;


	if(temp1 == SET && temp2 == SET)
	{
		//this interrupt is because of ore
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_ORE);
	}
#endif

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_RXNE);
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);


	if(temp1 && temp2 )
	{
		//this interrupt is because of rxne
		//this interrupt is because of txe
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
		{
			//TXE is set so send data
			if(pUSARTHandle->RxLen > 0)
			{
				*pUSARTHandle->pRxBuffer = pUSARTHandle->pUSARTx->DR;
				pUSARTHandle->pRxBuffer++;
				pUSARTHandle->RxLen--;
			}

			if(pUSARTHandle->RxLen == 0 )
			{
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
				pUSARTHandle->RxBusyState = USART_READY;
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
			}
		}
	}


	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_PE);
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_PEIE);


	if(temp1  && temp2 )
	{
		//this interrupt is because of pe
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_PE);
	}


	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;

	if(temp2 )
	{
		temp1 = pUSARTHandle->pUSARTx->SR;
		if(temp1 & ( 1 << USART_SR_FE))
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERREVENT_FE);
		}

		if(temp1 & ( 1 << USART_SR_NE) )
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERREVENT_NE);
		}

		if(temp1 & ( 1 << USART_SR_ORE) )
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERREVENT_ORE);
		}
	}


}


/*********************************************************************
 * @fn      		  - USART_ApplicationEventCallback
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
__weak void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle,uint8_t event)
{

}
